import React, { useState, useEffect, useMemo } from 'react';
import { useParams, Link } from 'react-router-dom';
import { motion } from 'framer-motion';
import { ArrowLeft, ExternalLink, Code, Globe, Github, Play, Image, Calendar, MapPin, Users, Award } from 'lucide-react';
import usePageAnimation from '../animations/usePageAnimation';
import './ProjectDetail.css';
import '../animations/animations.css';

const ProjectDetail = () => {
  const { id } = useParams();
  const [project, setProject] = useState(null);
  const animationRef = usePageAnimation('project-detail');

  const projectsData = useMemo(() => ({
    'trip-payment': {
      title: "Trip - Application de Paiement",
      period: "Depuis janvier 2025",
      school: "Projet Personnel",
      location: "Remote",
      team: "√âquipe de 2 d√©veloppeurs",
      status: "En d√©veloppement",
      technologies: ["Flutter", "Node.js", "Firebase"],
      description: "Application mobile de paiement s√©curis√©e, permettant la gestion des transactions et des comptes utilisateurs.",
      longDescription: "Trip est une application mobile compl√®te pour effectuer des paiements en toute s√©curit√©, g√©rer son portefeuille et suivre ses transactions. D√©velopp√©e avec Flutter pour le front-end et Node.js avec Firebase pour le backend, elle permet une exp√©rience fluide sur Android et iOS.",
      features: [
        "Inscription et authentification s√©curis√©es",
        "Gestion des comptes et portefeuilles",
        "Transactions instantan√©es entre utilisateurs",
        "Historique d√©taill√© des paiements",
        "Notifications push pour les transactions",
        "Interface utilisateur moderne et intuitive",
        "Int√©gration Firebase pour la s√©curit√© et la base de donn√©es"
      ],
      challenges: "S√©curisation des transactions, synchronisation temps r√©el, compatibilit√© multi-plateformes",
      impact: "Prototype fonctionnel permettant de g√©rer des paiements simul√©s et tests utilisateurs positifs",
      achievements: [
        "Application Flutter multiplateforme",
        "Backend Node.js avec Firebase s√©curis√©",
        "Interface UX/UI responsive et moderne"
      ],
      screenshots: [
        "/assets/Trip1.png",
        "/assets/Trip2.png",
        "/assets/Trip3.png"
      ],
      gitlabUrl: "https://gitlab.com/NthiekamWilliam/trip-payment",
      hasDemo: true,
      demoUrl: "https://demo.tripapp.com",
      mainImage: "/assets/Trip1.png",
      category: "Application Mobile",
      complexity: "Avanc√©",
      duration: "5 mois"
    },
    'school-registration': {
      title: "Syst√®me d'Inscription dans un √âtablissement Scolaire",
      period: "Depuis f√©vrier 2025",
      school: "Projet Personnel",
      location: "Remote",
      team: "√âquipe de 3 d√©veloppeurs",
      status: "Phase de test",
      technologies: ["React", "Node.js", "MongoDB", "Express"],
      description: "Application web pour g√©rer les inscriptions et les dossiers des √©tudiants dans un √©tablissement scolaire.",
      longDescription: "Ce syst√®me permet aux √©tablissements scolaires de g√©rer l'inscription des √©tudiants, le suivi des dossiers, les notifications et la gestion administrative. L'application web offre une interface intuitive pour les administrateurs et les enseignants.",
      features: [
        "Gestion compl√®te des inscriptions",
        "Suivi des dossiers √©tudiants",
        "Notifications automatiques",
        "Gestion des niveaux et classes",
        "Interface admin et enseignant",
        "Export et reporting des donn√©es"
      ],
      challenges: "Gestion des donn√©es sensibles, optimisation de l'acc√®s concurrent, interface multi-utilisateurs",
      impact: "R√©duction des d√©lais administratifs de 50%, meilleure organisation des dossiers",
      achievements: [
        "Interface web responsive",
        "Backend s√©curis√© avec Node.js et MongoDB",
        "Gestion multi-utilisateurs fonctionnelle"
      ],
      screenshots: [
        "/assets/School1.png",
        "/assets/School2.png",
        "/assets/School3.png"
      ],
      gitlabUrl: "https://gitlab.com/NthiekamWilliam/school-registration",
      hasDemo: false,
      demoUrl: null,
      mainImage: "/assets/School1.png",
      category: "Application Web",
      complexity: "Interm√©diaire",
      duration: "4 mois"
    },
    'thegift': {
      title: "TheGift",
      period: "Depuis mars 2025",
      school: "Projet Personnel",
      location: "Remote",
      team: "√âquipe de 2 d√©veloppeurs",
      status: "En production",
      technologies: ["React", "Node.js", "MongoDB", "Express"],
      description: "Plateforme web pour g√©rer et offrir des cadeaux personnalis√©s et suivre les commandes.",
      longDescription: "TheGift permet aux utilisateurs d'envoyer et de g√©rer des cadeaux personnalis√©s. L'application inclut un catalogue, un syst√®me de paiement int√©gr√©, des notifications et un suivi des commandes en temps r√©el.",
      features: [
        "Catalogue de cadeaux interactif",
        "Gestion des commandes et paiements",
        "Notifications et rappels automatiques",
        "Interface utilisateur intuitive",
        "Suivi en temps r√©el des commandes",
        "Syst√®me d'√©valuation des cadeaux"
      ],
      challenges: "S√©curisation des paiements, gestion du catalogue dynamique, performance sur pics de trafic",
      impact: "Augmentation de la satisfaction utilisateur et simplification de l‚Äôenvoi de cadeaux",
      achievements: [
        "Plateforme fonctionnelle et s√©curis√©e",
        "Backend performant avec Node.js",
        "UI/UX responsive et agr√©able"
      ],
      screenshots: [
        "/assets/TheGift1.png",
        "/assets/TheGift2.png",
        "/assets/TheGift3.png"
      ],
      gitlabUrl: "https://gitlab.com/NthiekamWilliam/thegift",
      hasDemo: true,
      demoUrl: "https://demo.thegift.com",
      mainImage: "/assets/TheGift1.png",
      category: "Application Web E-commerce",
      complexity: "Avanc√©",
      duration: "5 mois"
    }
  }), []);

  useEffect(() => {
    if (projectsData[id]) {
      setProject(projectsData[id]);
    }
  }, [id, projectsData]);

  if (!project) {
    return (
      <div className="project-detail-container">
        <div className="project-not-found">
          <h2>Projet non trouv√©</h2>
          <Link to="/portfolio" className="btn">
            <ArrowLeft size={20} />
            Retour au Portfolio
          </Link>
        </div>
      </div>
    );
  }

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: { staggerChildren: 0.2 }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 50 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.6, ease: "easeOut" } }
  };

  return (
    <div className="project-detail" ref={animationRef}>
      <motion.div className="project-detail-container" variants={containerVariants} initial="hidden" animate="visible">
        <motion.div className="project-header" variants={itemVariants}>
          <Link to="/portfolio" className="back-link">
            <ArrowLeft size={20} /> Retour au Portfolio
          </Link>
          <div className="project-title-section">
            <h1>{project.title}</h1>
            <div className="project-meta">
              <span className="meta-item"><Calendar size={16} />{project.period}</span>
              <span className="meta-item"><MapPin size={16} />{project.location}</span>
              <span className="meta-item"><Users size={16} />{project.team}</span>
              <span className="meta-item status"><Award size={16} />{project.status}</span>
            </div>
          </div>
        </motion.div>

        <motion.div className="project-hero" variants={itemVariants}>
          <div className="project-main-image"><img src={project.mainImage} alt={project.title} /></div>
          <div className="project-quick-info">
            <div className="info-card"><h3>Cat√©gorie</h3><p>{project.category}</p></div>
            <div className="info-card"><h3>Complexit√©</h3><p>{project.complexity}</p></div>
            <div className="info-card"><h3>Dur√©e</h3><p>{project.duration}</p></div>
            <div className="info-card"><h3>√âcole</h3><p>{project.school}</p></div>
          </div>
        </motion.div>

        {project.screenshots && project.screenshots.length > 0 && (
          <motion.div className="project-screenshots" variants={itemVariants}>
            <h2><Image size={24} /> Captures d'√©cran du projet</h2>
            <div className="screenshots-gallery">
              {project.screenshots.map((s, i) => (<div key={i} className="screenshot-item"><img src={s} alt={`${project.title} - Capture ${i + 1}`} loading="lazy" /></div>))}
            </div>
          </motion.div>
        )}

        <motion.div className="project-description" variants={itemVariants}>
          <h2>Description du Projet</h2>
          <p className="description-short">{project.description}</p>
          <p className="description-long">{project.longDescription}</p>
        </motion.div>

        <motion.div className="project-technologies" variants={itemVariants}>
          <h2><Code size={24} /> Technologies Utilis√©es</h2>
          <div className="tech-tags">{project.technologies.map((tech,i)=><span key={i} className="tech-tag">{tech}</span>)}</div>
        </motion.div>

        <motion.div className="project-features" variants={itemVariants}>
          <h2><Globe size={24} /> Fonctionnalit√©s Principales</h2>
          <div className="features-grid">{project.features.map((f,i)=><div key={i} className="feature-item"><span className="feature-icon">‚ú®</span><p>{f}</p></div>)}</div>
        </motion.div>

        <motion.div className="project-challenges-impact" variants={itemVariants}>
          <div className="challenges-section"><h2>üöß D√©fis Rencontr√©s</h2><p>{project.challenges}</p></div>
          <div className="impact-section"><h2>üìà Impact et R√©sultats</h2><p>{project.impact}</p></div>
        </motion.div>

        <motion.div className="project-achievements" variants={itemVariants}>
          <h2>üèÜ R√©alisations Principales</h2>
          <div className="achievements-list">{project.achievements.map((a,i)=><div key={i} className="achievement-item"><span className="achievement-icon">‚úÖ</span><p>{a}</p></div>)}</div>
        </motion.div>

        <motion.div className="project-actions" variants={itemVariants}>
          <div className="action-buttons">
            {project.gitlabUrl && (
              <a href={project.gitlabUrl} target="_blank" rel="noopener noreferrer" className="action-btn gitlab">
                <Github size={20} /> Voir le Code sur GitLab <ExternalLink size={16} />
              </a>
            )}
            {project.hasDemo && project.demoUrl ? (
              <a href={project.demoUrl} target="_blank" rel="noopener noreferrer" className="action-btn demo">
                <Play size={20} /> Voir la D√©mo <ExternalLink size={16} />
              </a>
            ) : (
              <div className="action-btn demo disabled"><Play size={20} /> D√©mo non disponible</div>
            )}
          </div>
        </motion.div>
      </motion.div>
    </div>
  );
};

export default ProjectDetail;
